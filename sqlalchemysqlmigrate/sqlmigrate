#!/usr/bin/python
"""Simple manual migrations for SQLAlchemy.

Usage:
  sqlmigrate [-v] migrations_env
  sqlmigrate [-v] schema_dump
  sqlmigrate [-v] version
  sqlmigrate [-v] new [MIGRATION_TYPE]
  sqlmigrate [-v] up [VERSION]
  sqlmigrate [-v] down VERSION
  sqlmigrate [-v] create_db [--initial]
  sqlmigrate [-v] drop_db
  sqlmigrate [-v] load FILE
  sqlmigrate [-v] remove VERSION
  sqlmigrate [-v] stamp [VERSION]
  sqlmigrate --version

Arguments:
  migrations_env        Create directory structure holding migrations
  schema_dump           Create first migration by dumping database
  new                   Add a new migration (Default MIGRATION TYPE=sql)
  MIGRATION_TYPE        Migration type, 'sql' or 'py'
  up                    Migrate up (If no VERSION is specified, migrate to
                        latest)
  down                  Migrate down
  VERSION               Version to migrate to
  create_db             Recreate the database
  drop_db               Drop database
  load                  Load database from file
  FILE                  Database file to load
  remove                Removes a entry from the db_version table so that the
                        migration can be reapplied (Provided it is in a highest
                        current version)
  stamp                 Stamp a migration as already having taken place
                        (If no VERSION is specified, stamp to latest)

Options:
  -h --help
  -v --verbose          verbose mode
  --version             Show version
  --initial             Load migration 0

"""

import os
import sys
from docopt import docopt

# Required to import from project root
sys.path.insert(0, os.path.abspath(os.path.curdir))

try:
    from migrations.migrations_env import engine, db_session
except:
    pass


# Console colors
BLUEC = '\033[94m'
GREENC = '\033[92m'
YELLOWC = '\033[93m'
REDC = '\033[91m'
ENDC = '\033[0m'


# Ensure migrations only run once
has_run = False


class MigrationError(Exception):
    """Raise MigrationError if we fail to migrate."""
    pass


def _find_migrations(path):
    """Gets a list of manual migrations."""
    return set([int(f.split('.')[0])
                for f in os.listdir(path)
                if not f.startswith('__init__') and f.split('.')[1] in ['py', 'sql']])


def _get_current_db_version():
    """Gets the current schema version."""
    try:
        return int(db_session.execute("select max(version) from db_version").scalar())
    except Exception:
        db_session.rollback()
        print "db_version table does not exist, will apply all migrations..."
        return None


def _apply_migration(migration_dir, migration, verbose=False):
    """Applies a migration."""
    fname = "{}/{}.sql".format(migration_dir, migration)
    if os.path.exists(fname):
        sql = open(fname, 'r').read()
        # Need to escape schema dump properly
        sql = sql.replace("%", "%%").decode('utf-8')
        if verbose:
            print sql.replace('\r', '\r\n')
        db_session.execute(sql)
        try:
            db_session.commit()
        except Exception:
            db_session.rollback()
            raise
    else:
        fname = "{}/{}.py".format(migration_dir, migration)
        modpath = fname.split('/')[-1]
        mod = fname.replace('/', '.').strip('.py')
        if verbose:
            mod_text = open(fname, 'r').read()
            print mod_text.replace('\r', '\r\n')
        __import__('{}.{}'.format(modpath, mod), {}, {})
    print BLUEC + "-- Applied migration " + GREENC + fname + ENDC


def _remove_stale_migrations(migrations, db_version):
    """Removes migrations from the database which don't exist on the
    filesystem."""
    # E.g. 5 migrations, while db version is 10
    # Remove db entries for migrations 6 - 10
    if db_version:
        for v in range(max(migrations) + 1, db_version + 1):
            remove(v)


def stamp(version):
    """Stamp a migration as already having taken place."""
    db_session.execute("INSERT INTO db_version (version) VALUES ('{}');".format(version))
    db_session.commit()


def remove(version):
    """Removes a entry from the db_version table so that the migration can be
    reapplied (Provided it is in a highest current version)
    """
    db_session.execute("DELETE FROM db_version WHERE version = '{}';".format(version))
    db_session.commit()


def up(version=None, verbose=False):
    """Applies all migrations that have not currently
    been applied.

    Returns version to which user migrated.

    """
    global has_run
    if not has_run:
        has_run = True
        migration_dir = 'migrations/up'
        migrations = _find_migrations(migration_dir)
        if version is None:
            version = max(migrations)
            print "No version was specified, will upgrade to the latest schema version."
            print "--------------------------------------------------------------------"
        elif version not in migrations:
            raise MigrationError("Failed to migrate. Version {} does not exist.".format(version))

        db_version = _get_current_db_version()
        _remove_stale_migrations(migrations, db_version)

        if version == 0:
            _apply_migration(migration_dir, version, verbose)
        else:
            migrations_to_apply = sorted([i for i in migrations
                                          if i > db_version and i <= version
                                          ])

            for migration in migrations_to_apply:
                _apply_migration(migration_dir, migration, verbose)


def down(version, verbose=False):
    """Downgrades the database to the version specified.

    Returns version to which user migrated.

    """
    global has_run
    if not has_run:
        has_run = True
        migration_dir = 'migrations/down'
        migrations = _find_migrations(migration_dir)
        db_version = _get_current_db_version()
        _remove_stale_migrations(migrations, db_version)
        migrations_to_apply = sorted([i for i in migrations
                                     if i <= db_version and i > version])
        migrations_to_apply.reverse()

        for migration in migrations_to_apply:
            _apply_migration(migration_dir, migration, verbose)


def drop_db():
    if engine.name == 'mysql':
        print YELLOWC + "Dropping database..." + ENDC
        cmd = 'mysql -P {port} -h {host} -u {username} -p{password} -e "{sql}"'
        sql = 'drop database {};'.format(engine.url.database)
        os.popen2(cmd.format(sql=sql,
                             port=engine.url.port,
                             host=engine.url.host,
                             username=engine.url.username,
                             password=engine.url.password,
                             ))
    elif engine.name == 'postgresql':
        print YELLOWC + "Dropping database..." + ENDC
        with open('~/.pgpass', 'w') as pgpass:
            pgpass.write(engine.url.password)
        cmd = "pkill -f 'postgres: postgres {}'".format(engine.url.database)
        os.popen2(cmd)
        cmd = 'dropdb -w -U {} {}'.format(engine.url.username,
                                          engine.url.database)
        os.popen2(cmd)


def create_db(initial=False):
    if engine.name == 'mysql':
        print YELLOWC + "Creating database..." + ENDC
        cmd = 'mysql -P {port} -h {host} -u {username} -p{password} -e "{sql}"'
        sql = 'create database {} character set utf8 collate utf8_general_ci;'.\
            format(engine.url.database)
        os.popen2(cmd.format(sql=sql,
                             port=engine.url.port,
                             host=engine.url.host,
                             username=engine.url.username,
                             password=engine.url.password,
                             ))
    elif engine.name == 'postgresql':
        print YELLOWC + "Creating database..." + ENDC
        cmd = 'createdb -h localhost -O {} {}'.format(engine.url.username,
                                                      engine.url.database)
        os.popen2(cmd)
    if initial:
        up(0)


def new(migration_type):
    "Add a new migration (sql or py)"
    migrations = _find_migrations('migrations/up').union(_find_migrations('migrations/down'))
    if not migrations:
        migrations = [0]
    latest = max(migrations)
    new = latest + 1
    if migration_type not in ['sql', 'py']:
        sys.exit("Migration type {} not supported.".format(migration_type))
    if migration_type == 'sql':
        with open('migrations/up/{}.sql'.format(new), 'w') as fu:
            fu.writelines("""
-- SQL goes here

INSERT INTO db_version (version) VALUES ('{}');""".format(new))
        with open('migrations/down/{}.sql'.format(new), 'w') as fd:
            fd.writelines("""
-- SQL goes here

DELETE FROM db_version WHERE version = '{}';""".format(new))
    elif migration_type == 'py':
        with open('migrations/up/{}.py'.format(new), 'w') as fu:
            fu.writelines("""from migrations.env import engine, db_session

##########################
# Migration code goes here
##########################

db_session.execute("INSERT INTO db_version (version) VALUES ('{}');")

try:
db_session.commit()
except Exception:
db_session.rollback()
raise
""".format(new))
        with open('migrations/down/{}.py'.format(new), 'w') as fd:
            fd.writelines("""from migrations.env import engine, db_session

##########################
# Migration code goes here
##########################

db_session.execute("DELETE FROM db_version WHERE version = '{}';")

try:
db_session.commit()
except Exception:
db_session.rollback()
raise
""".format(new))

    print "Created version {}".format(new)


def schema_dump():
    dbtype = engine.name
    params = dict(database=engine.url.database,
                  host=engine.url.host,
                  password=engine.url.password,
                  port=engine.url.port,
                  username=engine.url.username
                  )

    fname = 'migrations/up/1.sql'
    if dbtype == 'mysql':
        os.popen('mysqldump -P {port} -h {host} -u {username} -p{password} {database} --no-data=true --add-drop-table=false > migrations/up/1.sql'.format(**params))
        with open(fname, 'a') as fd:
            fd.write("\n\nINSERT INTO db_version (version) VALUES ('1');")
        print "Schema saved in {}".format(fname)
    elif dbtype == 'postgresql':
        if not params['port']:
            params['port'] = ''
        os.popen('pg_dump -U {username} -s {database} > migrations/up/1.sql'.format(**params))
        with open(fname, 'a') as fd:
            fd.write("\n\nINSERT INTO db_version (version) VALUES ('1');")
        print "Schema saved in {}".format(fname)
    else:
        sys.exit("Dump of {} not yet supported.".format(dbtype))


def create_migrations_env():
    if os.path.exists('migrations'):
        print YELLOWC + "./migrations directory already exists. Please remove to recreate." + ENDC
    else:
        os.mkdir('migrations')
        print GREENC + "Created ./migrations" + ENDC
        os.mkdir('migrations/up')
        print GREENC + "Created ./migrations/up" + ENDC
        os.mkdir('migrations/down')
        print GREENC + "Created ./migrations/down" + ENDC
        with open('migrations/migrations_env.py', 'w') as fd:
            fd.write("from database import engine, db_session")
        print GREENC + "Created ./migrations/migrations_env.py" + ENDC
        with open('migrations/__init__.py', 'w') as fd:
            fd.write("")
        print GREENC + "Created ./migrations/__init__.py" + ENDC
        print "Done!"


def load(migration_file):
    dbtype = engine.name
    params = dict(database=engine.url.database,
                  host=engine.url.host,
                  password=engine.url.password,
                  port=engine.url.port,
                  username=engine.url.username,
                  fname=migration_file
                  )

    if dbtype == 'postgresql':
        os.popen('psql -U {username} -s {database} < {fname}'.format(**params))
    else:
        print "Unsupported db type"
    print "Loaded migration {}".format(migration_file)


def main():
    args = docopt(__doc__, version='0.1')
    verbose = args['--verbose']
    if args['down']:
        down(int(args['VERSION']), verbose)
    elif args['up']:
        version = args['VERSION']
        if args['VERSION']:
            version = int(version)
        up(version, verbose)
    elif args['drop_db']:
        drop_db()
    elif args['create_db']:
        create_db(args['--initial'])
    elif args['new']:
        new(args['MIGRATION_TYPE'])
    elif args['remove']:
        remove(int(args['VERSION']))
    elif args['load']:
        load(args['FILE'])
    elif args['stamp']:
        version = args['VERSION']
        if version:
            version = int(version)
        else:
            migrations = _find_migrations('migrations/up').union(_find_migrations('migrations/down'))
            version = max(migrations)
            print "No stamp version provided, stamping up to lastest version: {}".format(version)
        stamp(version)
    elif args['version']:
        sys.exit(str(_get_current_db_version()))
    elif args['migrations_env']:
        create_migrations_env()
    elif args['schema_dump']:
        schema_dump()

if __name__ == '__main__':
    main()
